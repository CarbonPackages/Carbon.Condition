// Return true if a content element or a node type definition is on a document

prototype(Carbon.Condition:Case)  < prototype(Neos.Fusion:Component) {
    node = ${documentNode}

    enabled = true

    content = Neos.Fusion:DataStructure {
        collection = '[instanceof Neos.Neos:ContentCollection]'
        nodeType = null
        propertyFilter = ''
        filter = ${this.nodeType ? ('[instanceof ' + this.nodeType + ']' + this.propertyFilter) : null}
    }

    document = Neos.Fusion:DataStructure {
        nodeType = null
        propertyFilter = ''
        filter = ${this.nodeType ? ('[instanceof ' + this.nodeType + ']' + this.propertyFilter) : null}
    }

    context = Neos.Fusion:DataStructure {
        backend = true
        live = false
    }

    renderer = Neos.Fusion:Case {
        isNotEnabled {
            condition = ${props.enabled == false}
            renderer = false
        }
        onContent {
            condition = ${props.content.filter && props.content.collection && q(props.node).children(props.content.collection).find(props.content.filter).is()}
            renderer = true
        }
        onDocument {
            condition = ${props.document.filter && q(props.node).filter(props.document.filter).is()}
            renderer = true
        }
        correctContext {
            condition = ${(props.context.live && !renderingMode.isEdit) || (props.context.backend && renderingMode.isEdit)}
            renderer = true
        }
        default {
            condition = true
            renderer = false
        }
    }
}
